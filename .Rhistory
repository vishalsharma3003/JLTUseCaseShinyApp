load("D:/DS/JLT/.RData")
install.packages("shiny")
install.packages("shiny")
install.packages("sunburstR")
library(shiny)
library(sunburstR)
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header=F
,stringsAsFactors = FALSE
)
sequences
server <- function(input,output,session){
output$sunburst <- renderSunburst({
#invalidateLater(1000, session)
sequences <- sequences[sample(nrow(sequences),1000),]
add_shiny(sunburst(sequences))
})
selection <- reactive({
input$sunburst_mouseover
})
output$selection <- renderText(selection())
}
server
sequences[sample(nrow(sequences),1000),]
sample(nrow(sequences)
sample(nrow(sequences),1000),
sequences[sample(nrow(sequences),1000),]
ui<-fluidPage(
sidebarLayout(
sidebarPanel(
),
# plot sunburst
mainPanel(
sunburstOutput("sunburst"),
textOutput("selection")
)
)
)
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
library(sunburstR)
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header=F
,stringsAsFactors = FALSE
)
server <- function(input,output,session){
output$sunburst <- renderSunburst({
#invalidateLater(1000, session)
sequences <- sequences[sample(nrow(sequences),1000),]
add_shiny(sunburst(sequences))
})
selection <- reactive({
input$sunburst_mouseover
})
output$selection <- renderText(selection())
}
ui<-fluidPage(
sidebarLayout(
sidebarPanel(
),
# plot sunburst
mainPanel(
sunburstOutput("sunburst"),
textOutput("selection")
)
)
)
shinyApp(ui = ui, server = server)
View(ui)
library(sunburstR)
# read in sample visit-sequences.csv data provided in source
# only use first 100 rows to speed package build and check
# https://gist.github.com/kerryrodden/7090426#file-visit-sequences-csv
sequences <- read.csv(
system.file("examples/visit-sequences.csv",package="sunburstR")
,header = FALSE
,stringsAsFactors = FALSE
)[1:100,]
sunburst(sequences)
sequences
## Not run:
# explore some of the arguments
sunburst(
sequences
,count = TRUE
)
sunburst(
sequences
# apply sort order to the legends
,legendOrder = unique(unlist(strsplit(sequences[,1],"-")))
# just provide the name in the explanation in the center
,explanation = "function(d){return d.data.name}"
)
# try with json data
sequence_json <- jsonlite::fromJSON(
system.file("examples/visit-sequences.json",package="sunburstR"),
simplifyDataFrame = FALSE
)
sunburst(sequence_json)
# try with csv data from this fork
# https://gist.github.com/mkajava/7515402
# great use for new breadbrumb wrapping
sunburst(
csvdata = read.csv(
file = paste0(
"https://gist.githubusercontent.com/mkajava/",
"7515402/raw/9f80d28094dc9dfed7090f8fb3376ef1539f4fd2/",
"comment-sequences.csv"
)
,header = TRUE
,stringsAsFactors = FALSE
)
)
# try with csv data from this fork
# https://gist.github.com/rileycrane/92a2c36eb932b4f99e51/
sunburst( csvdata = read.csv(
file = paste0(
"https://gist.githubusercontent.com/rileycrane/",
"92a2c36eb932b4f99e51/raw/",
"a0212b4ca8043af47ec82369aa5f023530279aa3/visit-sequences.csv"
)
,header=FALSE
,stringsAsFactors = FALSE
))
## End(Not run)
## Not run:
# use sunburst to analyze ngram data from Peter Norvig
# http://norvig.com/mayzner.html
library(sunburstR)
library(pipeR)
# read the csv data downloaded from the Google Fusion Table linked in the article
ngrams2 <- read.csv(
system.file(
"examples/ngrams2.csv"
,package="sunburstR"
)
, stringsAsFactors = FALSE
)
View(ngrams2)
ngrams2 %>>%
# let's look at ngrams at the start of a word, so columns 1 and 3
(.[,c(1,3)]) %>>%
# split the ngrams into a sequence by splitting each letter and adding -
(
data.frame(
sequence = strsplit(.[,1],"") %>>%
lapply( function(ng){ paste0(ng,collapse = "-") } ) %>>%
unlist
,freq = .[,2]
,stringsAsFactors = FALSE
)
) %>>%
sunburst
ngrams2 %>>%
# let's look at ngrams at the start of a word, so columns 1 and 3
(.[,c(1,3)]) %>>%
# split the ngrams into a sequence by splitting each letter and adding -
(
data.frame(
sequence = strsplit(.[,1],"") %>>%
lapply( function(ng){ paste0(ng,collapse = "-") } ) %>>%
unlist
,freq = .[,2]
,stringsAsFactors = FALSE
)
) %>>%
sunburst
library(r2d3)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = system.file("examples/barchart.js", package = "r2d3"),
dependencies = "d3-jetpack"
)
install.packages("r2d3")
library(r2d3)
r2d3(
data = c (0.3, 0.6, 0.8, 0.95, 0.40, 0.20),
script = system.file("examples/barchart.js", package = "r2d3"),
dependencies = "d3-jetpack"
)
install.packages("d3heatmap")
library(d3heatmap)
library(shiny)
ui <- fluidPage(
h1("A heatmap demo"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
checkboxInput("cluster", "Apply clustering"),
d3heatmapOutput("heatmap")
)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
)
})
}
shinyApp(ui, server)
## Not run:
# Download GenBank file
gbff <- tempfile()
download.file(paste0("ftp://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/000/297/395/",
"GCF_000297395.2_ASM29739v2/GCF_000297395.2_ASM29739v2_genomic.gbff.gz"),gbff)
# Genome browser generation.
# It creates a genome browser ready to be viewed in Firefox.
# For a server version, ready to be shared with Apache as a Website, set the parameter server=True
gb <- gbk2genomebrowser(gbff, dir = "Micromonospora_gbk")
## End(Not run)
#Data to determine the connection between the nodes
data(links)
#Data that determines the color of the nodes
data(nodeColor)
#Data that determines the size of the node
data(nodeValues)
#Create graph
qrage(links=links,nodeColor=nodeColor,nodeValue=nodeValues,cut=0.1)
install.packages("qrage")
library(d3heatmap)
library(shiny)
ui <- fluidPage(
h1("A heatmap demo"),
selectInput("palette", "Palette", c("YlOrRd", "RdYlBu", "Greens", "Blues")),
checkboxInput("cluster", "Apply clustering"),
d3heatmapOutput("heatmap")
)
server <- function(input, output, session) {
output$heatmap <- renderD3heatmap({
d3heatmap(
scale(mtcars),
colors = input$palette,
dendrogram = if (input$cluster) "both" else "none"
)
})
}
shinyApp(ui, server)
load("D:/DS/JLT/.RData")
shiny::runApp('d:/Profiles/vksharma/Documents/R/Demo')
runApp('d:/Profiles/vksharma/Documents/R/Demo')
runApp('d:/Profiles/vksharma/Documents/R/Demo')
runApp('d:/Profiles/vksharma/Documents/R/Demo')
runApp('d:/Profiles/vksharma/Documents/R/Demo')
shiny::runApp('d:/Profiles/vksharma/Documents/R/Demo')
shiny::runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
shiny::runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
library(shiny)
shinyApp(
fluidPage(
checkboxGroupInput('checkbox', 'select columns', names(mtcars), inline = TRUE),
DT::dataTableOutput('table')
),
function(input, output)
output$table <- DT::renderDataTable({ mtcars[input$checkbox] })
)
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
clear
shiny::runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
runApp('D:/DS/JLT/Shiny App/JLT_DS_UC')
#devtools::install_github("jcheng5/googleCharts")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='vishalsharma', token='F9F61F63405644BB83E7EB1D59E09782', secret='kpyQZBWbUuccwyWpL8iQdAwowTa61TM+p7wQlfAl')
#devtools::install_github("jcheng5/googleCharts")
library(rsconnect)
rsconnect::deployApp('file:///D:/DS/JLT/Shiny App/JLT_DS_UC/app.R')
setwd("D:\\DS\\JLT\\Shiny App\\JLT_DS_UC")
rsconnect::deployApp('file:///D:/DS/JLT/Shiny App/JLT_DS_UC/app.R')
rsconnect::deployApp('app.R')
rsconnect::deployApp('D:\\DS\\JLT\\Shiny App\\JLT_DS_UC')
library(shinySignals)   # devtools::install_github("hadley/shinySignals")
rsconnect::deployApp('D:\\DS\\JLT\\Shiny App\\JLT_DS_UC')
rsconnect::deployApp('D:\\DS\\JLT\\Shiny App\\JLT_DS_UC')
setwd(".")
wb2<- "WC_Data_Science Case Study.csv"
#1. Missing values
# Blank values instead of NA so reload with NA, Commas and hyphen in claim amount
# Now read with NA
compensationsWithNA <- read.csv(wb2,header = T, na.strings = c("","NA"))
rsconnect::deployApp('D:\\DS\\JLT\\Shiny App\\JLT_DS_UC')
rsconnect::deployApp('D:\\DS\\JLT\\Shiny App\\JLT_DS_UC')
skim(compensationsWithNA)
??skim
devtools::install_github("ropensci/skimr", "v2")
devtools::install_github("ropensci/skimr", "v2")
skim(compensationsWithNA)
library(skimr)
skim(compensationsWithNA)
runApp()
